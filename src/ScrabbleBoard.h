#ifndef SCRABBLE_BOARD_H
#define SCRABBLE_BOARD_H
#include "BoardState.h"
#include <string>
#include <vector>
#include <utility>
#include <unordered_set>


class ScrabbleBoard
{
private:
	BoardState boardState;
	bool freePlay;
	std::vector<std::pair<size_t, size_t>> blankTileLocation = {};
	std::unordered_set<std::string> dictionary;

	/**
		@return if the currently stored boardState is valid then return true,
			otherwise return false. Checks that all of the vectors are a square
			of the same size.
	*/
	bool boardIsValid() const;

	/**
		This is a helper function to the public putWord. It will use the rules
		I later define for freeplay mode. If I ever define them.
	*/
	int putWordFreeplay(size_t x, size_t y, bool vertical, std::string s);

	void loadDictionary();
public:
	/**
		Takes in a boardState and verifies that it is valid. Mostly if the
		vectors in the board state are of different sizes, then an exception
		will be thrown.

		Freeplay mode is default false, but can be set to true if you don't want
		to worry about the normal rules of scrabble and you just want to add
		words to the board without thinking.
	*/
	ScrabbleBoard(BoardState bs, bool fp = false);
	void setFreePlay(bool fp) { freePlay = fp; }
	bool getFreePlay() const { return freePlay; }
	/**
		Sets the board state, but also veifies if its valid.
		It mostly makes sure that all of the board vectors are of the same
		size and longer than 0. Returns true if valid. Otherwise it does not
		change the boardState.
	*/
	bool setBoardState(BoardState bs);
	BoardState getBoardState() const { return boardState; }
	/**
		Gives a string representing the scrabble baord.
		@param showMultipliers If this is true, then letter and word multipliers
			will be shown. Due to the nature of everything being 1 character
			long, multipliers that aren't 0-9 will now show up correctly.
			They will ovewrite letters that are on their location. Word
			multipliers will overwrite letter multipliers as they are generally
			more valuable.
	*/
	std::string toString(bool showMultipliers = false) const;
	/**
		Same as toString, it just prints it to stdout for you.
	*/
	void printBoard(bool showMultipliers = false) const;

	/**
		Places the given word in the board, and returns the number of points
		that word generates. If the word is invalid according to the normal
		rules of scrabble and the letters left in the bag (and freeplay is not
		enabled), then INT_MIN will be returned. Additionally, if there are
		already letters on the board for this word, they will not be taken
		from the bag.
		@param x The X coordinate on the board where the word should go,
			starting at 0.
		@param y The Y coordinate on the board where the word should go,
			starting at 0.
		@param vertical If true then the word will be placed vertically,
			starting at x and y. If false, then the word will be placed
			horizontally starting at x and y.
		@param s The String to be inserted.
		@return The number of points generated by the word, and any other words
			it creates. INT_MIN if the word trying to be placed down is invalid.
	*/
	int putWord(size_t x, size_t y, bool vertical, std::string s);

};


#endif